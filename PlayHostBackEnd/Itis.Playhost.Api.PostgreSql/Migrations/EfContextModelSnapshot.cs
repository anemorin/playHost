// <auto-generated />
using System;
using Itis.Playhost.Api.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Itis.Playhost.Api.PostgreSql.Migrations
{
    [DbContext(typeof(EfContext))]
    partial class EfContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Url картинки");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Url картинки");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasComment("Url картинки");

                    b.HasKey("Id");

                    b.ToTable("games", "public", t =>
                        {
                            t.HasComment("Игры");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.New", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Время создания");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Текст");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Заголовок");

                    b.HasKey("Id");

                    b.ToTable("news", "public", t =>
                        {
                            t.HasComment("Новости");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Время создания");

                    b.Property<int>("Rate")
                        .HasColumnType("integer")
                        .HasComment("Оценка от 1 до 5");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Пользователь");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("reviews", "public", t =>
                        {
                            t.HasComment("Обзоры");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasComment("Наименование роли");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text")
                        .HasComment("Нормализованное имя");

                    b.HasKey("Id");

                    b.ToTable("roles", "public", t =>
                        {
                            t.HasComment("Роли");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Server", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer")
                        .HasComment("Максимальное количество пользователей");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Название");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasComment("Цена");

                    b.Property<int>("Ram")
                        .HasColumnType("integer")
                        .HasComment("Оперативная память");

                    b.HasKey("Id");

                    b.ToTable("servers", "public", t =>
                        {
                            t.HasComment("Сервера");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Дата окончания");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasComment("Игра");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasComment("Цена");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid")
                        .HasComment("Сервер");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Дата начала");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Пользователь");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("subscriptions", "public", t =>
                        {
                            t.HasComment("Подписки");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasComment("Почта");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Имя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Фамилия");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasComment("Никнейм пользователя");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("users", "public", t =>
                        {
                            t.HasComment("Профили пользователей");
                        });
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone")
                        .HasComment("Дата рождения");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasComment("Гендер");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasComment("Рост");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasComment("Номер телефона");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer")
                        .HasComment("Вес");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_profiles", "public", t =>
                        {
                            t.HasComment("Профили пользователей");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Review", b =>
                {
                    b.HasOne("Itis.Playhost.Api.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Subscription", b =>
                {
                    b.HasOne("Itis.Playhost.Api.Core.Entities.Game", "Game")
                        .WithMany("Subscriptions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itis.Playhost.Api.Core.Entities.Server", "Server")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Itis.Playhost.Api.Core.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("Itis.Playhost.Api.Core.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Itis.Playhost.Api.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Game", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.Server", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Itis.Playhost.Api.Core.Entities.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Subscriptions");

                    b.Navigation("UserProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
